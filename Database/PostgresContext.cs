using Contracts.Repositories;
using Microsoft.EntityFrameworkCore;

namespace Database;

// generated by dotnet ef
// create table if not exists users (
//     id bigserial primary key,
//     tgId bigint unique not null,
//     name text not null,
//     isAdmin bool not null
// );
//
// create table if not exists queues (
//     id bigserial primary key,
//     tgChatId bigint not null,
//     tgMessageId bigint not null,
//     name text not null,
//     size int not null
// );
//
// create table if not exists users_queues (
//     id bigserial primary key,
//     userId bigint not null references users(id) on delete cascade,
//     queueId bigint not null references queues(id) on delete cascade,
//     position bigint not null
// )
#pragma warning disable SA1601
#pragma warning disable CA1062
#pragma warning disable SK1200
public partial class PostgresContext : DbContext
{
    public PostgresContext()
    {
    }

    public PostgresContext(DbContextOptions<PostgresContext> options)
        : base(options)
    {
    }

    public virtual DbSet<QueueData> Queues { get; set; } = null!;

    public virtual DbSet<UserData> Users { get; set; } = null!;

    public virtual DbSet<UsersQueueData> UsersQueues { get; set; } = null!;

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<QueueData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("queues_pkey");

            entity.ToTable("queues");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.Size).HasColumnName("size");
            entity.Property(e => e.TgChatId).HasColumnName("tgchatid");
            entity.Property(e => e.TgMessageId).HasColumnName("tgmessageid");
        });

        modelBuilder.Entity<UserData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("users_pkey");

            entity.ToTable("users");

            entity.HasIndex(e => e.TgId, "users_tgid_key").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.IsAdmin).HasColumnName("isadmin");
            entity.Property(e => e.Name).HasColumnName("name");
            entity.Property(e => e.TgId).HasColumnName("tgid");
        });

        modelBuilder.Entity<UsersQueueData>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("users_queues_pkey");

            entity.ToTable("users_queues");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Position).HasColumnName("position");
            entity.Property(e => e.QueueId).HasColumnName("queueid");
            entity.Property(e => e.UserId).HasColumnName("userid");

            entity.HasOne(d => d.QueueData).WithMany(p => p.UsersQueues)
                .HasForeignKey(d => d.QueueId)
                .HasConstraintName("users_queues_queueid_fkey");

            entity.HasOne(d => d.UserData).WithMany(p => p.UsersQueues)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("users_queues_userid_fkey");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}